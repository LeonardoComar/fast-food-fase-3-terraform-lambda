name: Terraform

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-east-1"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Configura credenciais AWS via secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    # Configura Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"

    # Instala Python e dependências para empacotamento
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    # Empacota a função Lambda
    - name: Package Lambda function
      working-directory: lambda/auth-lambda
      run: |
        # Instala dependências
        pip install -r requirements.txt -t .
        
        # Cria o ZIP (exclui arquivos desnecessários)
        zip -r auth_lambda.zip . \
          -x "*.git*" \
          -x "*.terraform*" \
          -x "*.zip" \
          -x ".github/*" \
          -x "__pycache__/*"
        
        # Lista conteúdo para verificação (opcional)
        echo "Conteúdo do ZIP:"
        unzip -l auth_lambda.zip | head -n 15

    # Inicializa e aplica Terraform
    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check -diff

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -input=false
      if: github.event_name == 'pull_request'

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'