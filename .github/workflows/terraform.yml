name: Terraform

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    # Exporta as credenciais AWS a partir dos GitHub Secrets
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:     ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ───────────────────────────────────────────────────────
      # 1) Zipar o código da Lambda (lambdaAuth)
      # ───────────────────────────────────────────────────────
      - name: Build Lambda (zip)
        run: |
          # Navega até a raiz do repositório
          cd $GITHUB_WORKSPACE

          # Volta a pasta 'lambda/auth-lambda/src' para zipar apenas o conteúdo necessário.
          # O nome do ZIP resultante ficará em 'lambdaAuth.zip' na raiz do projeto.
          zip -j lambdaAuth.zip lambda/auth-lambda/src/*.py

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.6"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        id: init
        run: terraform init -input=false

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan (PRs)
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan

      - name: Upload plan artifact (opcional)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

      - name: Terraform apply (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
